#include "stdlib.h"
#include <iostream>
#include <string>
#include <regex>
#include "pthread.h"

pthread_barrier_t barr; //A barrier that allows you to wait until all threads finish their work

std::string str = "", str1 = "", str2 = ""; //Strings generated by three threads
int k1 = 0, k2 = 0;  //The number of occurrences of string str1 and str2 in str, respectively

void* fthread(void* arg);

int main(int argc, char const *argv[]) 
{
    srand(time(0));

    int arg[2];

    for(int i = 0; i < 2; i++) 
	{
        arg[i] = i;
    }

	//Generate str
    for(int i = 0; i < 30; i++) 
	{
        str += char('a' + rand() % ('z' - 'a'));
    }

	//The number of iterations until the program terminates
    int iteration = 0;

    while(true) 
	{
        iteration++;
        pthread_barrier_init(& barr, NULL, 3); //barrier's initialization
        
        pthread_t pstr1;
        pthread_t pstr2;
		
        pthread_create(&pstr1, NULL, fthread, (void*)&arg[0]);
        pthread_create(&pstr2, NULL, fthread, (void*)&arg[1]);

        pthread_barrier_wait(& barr); //We are waiting for the completion of the threads using the barrier

        std::cout << "Str: " << str << std::endl;
        std::cout << "Str1: " << str1 << std::endl;
        std::cout << "Str2: " << str2 << std::endl;
        std::cout << "The number of occurrences of str1 in str: " << k1 << std::endl;
        std::cout << "The number of occurrences of str2 in str: " << k2 << std::endl;        

		//If the number of occurrences in the string str is different, the program outputs
		//number of iterations and shuts down
        if(k1 != k2) 
		{
            std::cout << "k1 is not equal to the k2" << std::endl;
            std::cout << "Number of iterations completed: " << iteration << std::endl;
            return 0;
        }

        std::cout << std::endl << "Press enter to continue ...";
        std::cin.get();
        system( "clear" );
    }    
}

void* fthread(void* arg)
{
    int str_num = *(int*)arg;
    std::string local_str(str);
    std::string thread_str = "";

	//Generating str1 and str2
    for(int i = 0; i < 2; i++) 
	{
        thread_str += char('a' + rand() % ('z' - 'a'));
    }

	//Counting the number of occurrences
    int local_k = (str.size() - (std::regex_replace(local_str, (std::regex)thread_str, "")).size()) / thread_str.size();

    if(str_num == 0) 
	{
        k1 = local_k; 
        str1 = thread_str;
    }
    else 
	{
        k2 = local_k;
        str2 = thread_str;
    }

    pthread_barrier_wait(&barr); //A barrier waiting for all threads to terminate
    return NULL;
}
